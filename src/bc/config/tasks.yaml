research_task:
  description: >
    Conduct a thorough research about {topic}
    Make sure you find any interesting and relevant information given
    the current year is {current_year}.
  expected_output: >
    A list with 10 bullet points of the most relevant information about {topic}
  agent: researcher

reporting_task:
  description: >
    Review the context you got and expand each topic into a full section for a report.
    Make sure the report is detailed and contains any and all relevant information.
  expected_output: >
    A fully fledged report with the main topics, each with a full section of information.
    Formatted as markdown without '```'
  agent: reporting_analyst

claude_analysis_task:
  description: >
    Using Claude's advanced reasoning capabilities, provide deep analysis and insights
    about {topic}. Go beyond surface-level information to uncover patterns, implications,
    and strategic recommendations. Consider multiple perspectives and potential future scenarios.
  expected_output: >
    A comprehensive analysis document containing:
    - Deep insights and patterns identified
    - Strategic implications and recommendations
    - Future scenario analysis
    - Risk assessment and opportunities
    Formatted as markdown with clear sections and bullet points
  agent: claude_agent

transit_planning_task:
  description: >
    Analyze the user's transit request and find optimal public transportation routes using the SFO BART schedule data.
    First, load the transit data from the provided schedule file. Then use the transit tools to:
    1. Search for stops near the origin and destination
    2. Find available routes between those stops
    3. Consider factors like time, cost, convenience, and accessibility
    4. Provide personalized recommendations with clear explanations
    
    The user request is: {user_request}
    The schedule file is: {schedule_file}
  expected_output: >
    A comprehensive transit plan including:
    - System overview and data summary
    - Multiple route options ranked by preference
    - Detailed timing and cost information
    - Alternative routes and backup plans
    - Accessibility considerations
    - Tips for the journey
    - Popular stops and route recommendations
    Formatted as markdown with clear sections and emojis
  agent: transit_planner

transit_analysis_task:
  description: >
    Analyze the SFO BART transit system using the provided schedule data to provide comprehensive insights.
    First, load the transit data and get system statistics. Then analyze:
    1. Transit patterns and trends in the data
    2. Route efficiency and coverage analysis
    3. Popular stops and high-traffic areas
    4. System optimization opportunities
    5. User experience insights and recommendations
    
    The schedule file is: {schedule_file}
  expected_output: >
    A detailed transit analysis report including:
    - System statistics and overview
    - Pattern analysis and trends
    - Efficiency insights and recommendations
    - User experience improvements
    - System optimization opportunities
    - Data-driven insights and conclusions
    - Popular routes and stops analysis
    Formatted as markdown with charts, bullet points, and clear sections
  agent: transit_analyst

route_optimization_task:
  description: >
    Use advanced algorithms and Claude's reasoning to find the most efficient
    and cost-effective transit routes from the SFO BART schedule data.
    First, load the transit data and analyze the system. Then optimize routes considering:
    1. Multiple optimization criteria (time, cost, transfers, accessibility)
    2. User preferences and constraints
    3. System-wide route efficiency
    4. Cost-benefit analysis for different options
    5. Personalized recommendations based on user profile
    
    Origin: {origin}
    Destination: {destination}
    Time: {time}
    Schedule file: {schedule_file}
  expected_output: >
    An optimized route recommendation including:
    - System overview and available options
    - Best route options with detailed analysis
    - Cost-benefit analysis for each option
    - Time optimization strategies
    - Accessibility considerations
    - Personalized recommendations based on user profile
    - Alternative routes and contingency plans
    Formatted as markdown with clear rankings, explanations, and visual organization
  agent: route_optimizer

safety_route_finding_task:
  description: >
    Find safe routes between two locations using incident data and street network analysis.
    Use the safety routing tools to:
    1. Analyze the start and end coordinates
    2. Find multiple route options with different safety weights
    3. Calculate safety scores and incident counts for each route
    4. Provide structured JSON response for frontend consumption
    
    Start Location: ({start_lat}, {start_lng})
    End Location: ({end_lat}, {end_lng})
    Safety Weight: {safety_weight}
    Incident Data: Police_Department_Incident_Reports__2018_to_Present_20250621.csv
  expected_output: >
    A structured JSON response containing:
    - Multiple route options with safety analysis
    - Route coordinates, distances, and durations
    - Safety scores and grades for each route
    - Incident counts and safety metrics
    - Best route recommendation
    - Execution time and routing method
    Formatted as valid JSON for frontend processing
  agent: safety_route_finder

safety_analysis_task:
  description: >
    Analyze safety patterns and provide insights about route security.
    Use the safety analysis tools to:
    1. Get safety information for specific locations
    2. Analyze incident data patterns
    3. Provide safety recommendations
    4. Generate safety heatmap data
    
    Analysis Request: {safety_analysis_request}
    Incident Data: Police_Department_Incident_Reports__2018_to_Present_20250621.csv
  expected_output: >
    A comprehensive safety analysis including:
    - Safety scores and grades for locations
    - Incident pattern analysis
    - Safety recommendations
    - Heatmap data for visualization
    - Risk assessment and mitigation strategies
    Formatted as structured JSON for frontend consumption
  agent: safety_analyst

route_planning_task:
  description: >
    Create comprehensive route plans with safety, efficiency, and user preferences.
    Combine safety analysis with route planning to:
    1. Generate multiple route options
    2. Analyze safety and efficiency trade-offs
    3. Provide personalized recommendations
    4. Create structured output for frontend applications
    
    Planning Request: {route_planning_request}
    User Preferences: {user_preferences}
    Safety Requirements: {safety_requirements}
  expected_output: >
    A comprehensive route plan including:
    - Multiple route options with detailed analysis
    - Safety vs. efficiency trade-offs
    - Personalized recommendations
    - Alternative routes and backup plans
    - Safety considerations and warnings
    - Structured JSON format for frontend integration
  agent: route_planner
