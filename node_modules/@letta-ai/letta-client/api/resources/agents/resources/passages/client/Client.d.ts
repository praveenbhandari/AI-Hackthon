/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as environments from "../../../../../../environments";
import * as core from "../../../../../../core";
import * as Letta from "../../../../../index";
export declare namespace Passages {
    interface Options {
        environment?: core.Supplier<environments.LettaEnvironment | string>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        token?: core.Supplier<string | undefined>;
        fetcher?: core.FetchFunction;
    }
    interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Additional headers to include in the request. */
        headers?: Record<string, string>;
    }
}
export declare class Passages {
    protected readonly _options: Passages.Options;
    constructor(_options?: Passages.Options);
    /**
     * Retrieve the memories in an agent's archival memory store (paginated query).
     *
     * @param {string} agentId
     * @param {Letta.agents.PassagesListRequest} request
     * @param {Passages.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Letta.UnprocessableEntityError}
     *
     * @example
     *     await client.agents.passages.list("agent_id")
     */
    list(agentId: string, request?: Letta.agents.PassagesListRequest, requestOptions?: Passages.RequestOptions): Promise<Letta.Passage[]>;
    /**
     * Insert a memory into an agent's archival memory store.
     *
     * @param {string} agentId
     * @param {Letta.agents.CreateArchivalMemory} request
     * @param {Passages.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Letta.UnprocessableEntityError}
     *
     * @example
     *     await client.agents.passages.create("agent_id", {
     *         text: "text"
     *     })
     */
    create(agentId: string, request: Letta.agents.CreateArchivalMemory, requestOptions?: Passages.RequestOptions): Promise<Letta.Passage[]>;
    /**
     * Delete a memory from an agent's archival memory store.
     *
     * @param {string} agentId
     * @param {string} memoryId
     * @param {Passages.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Letta.UnprocessableEntityError}
     *
     * @example
     *     await client.agents.passages.delete("agent_id", "memory_id")
     */
    delete(agentId: string, memoryId: string, requestOptions?: Passages.RequestOptions): Promise<unknown>;
    /**
     * Modify a memory in the agent's archival memory store.
     *
     * @param {string} agentId
     * @param {string} memoryId
     * @param {Letta.agents.PassageUpdate} request
     * @param {Passages.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Letta.UnprocessableEntityError}
     *
     * @example
     *     await client.agents.passages.modify("agent_id", "memory_id", {
     *         id: "id"
     *     })
     */
    modify(agentId: string, memoryId: string, request: Letta.agents.PassageUpdate, requestOptions?: Passages.RequestOptions): Promise<Letta.Passage[]>;
    protected _getCustomAuthorizationHeaders(): Promise<{
        Authorization: string;
    }>;
}
