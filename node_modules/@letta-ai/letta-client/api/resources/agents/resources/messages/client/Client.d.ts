/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as environments from "../../../../../../environments";
import * as core from "../../../../../../core";
import * as Letta from "../../../../../index";
export declare namespace Messages {
    interface Options {
        environment?: core.Supplier<environments.LettaEnvironment | string>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        token?: core.Supplier<string | undefined>;
        fetcher?: core.FetchFunction;
    }
    interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Additional headers to include in the request. */
        headers?: Record<string, string>;
    }
}
export declare class Messages {
    protected readonly _options: Messages.Options;
    constructor(_options?: Messages.Options);
    /**
     * Retrieve message history for an agent.
     *
     * @param {string} agentId
     * @param {Letta.agents.MessagesListRequest} request
     * @param {Messages.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Letta.UnprocessableEntityError}
     *
     * @example
     *     await client.agents.messages.list("agent_id")
     */
    list(agentId: string, request?: Letta.agents.MessagesListRequest, requestOptions?: Messages.RequestOptions): Promise<Letta.LettaMessageUnion[]>;
    /**
     * Process a user message and return the agent's response.
     * This endpoint accepts a message from a user and processes it through the agent.
     *
     * @param {string} agentId
     * @param {Letta.LettaRequest} request
     * @param {Messages.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Letta.UnprocessableEntityError}
     *
     * @example
     *     await client.agents.messages.create("agent_id", {
     *         messages: [{
     *                 role: "user",
     *                 content: [{
     *                         type: "text",
     *                         text: "text"
     *                     }]
     *             }]
     *     })
     */
    create(agentId: string, request: Letta.LettaRequest, requestOptions?: Messages.RequestOptions): Promise<Letta.LettaResponse>;
    /**
     * Update the details of a message associated with an agent.
     *
     * @param {string} agentId
     * @param {string} messageId
     * @param {Letta.agents.MessagesModifyRequest} request
     * @param {Messages.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Letta.UnprocessableEntityError}
     *
     * @example
     *     await client.agents.messages.modify("agent_id", "message_id", {
     *         content: "content"
     *     })
     */
    modify(agentId: string, messageId: string, request: Letta.agents.MessagesModifyRequest, requestOptions?: Messages.RequestOptions): Promise<Letta.agents.MessagesModifyResponse>;
    /**
     * Process a user message and return the agent's response.
     * This endpoint accepts a message from a user and processes it through the agent.
     * It will stream the steps of the response always, and stream the tokens if 'stream_tokens' is set to True.
     */
    createStream(agentId: string, request: Letta.LettaStreamingRequest, requestOptions?: Messages.RequestOptions): Promise<core.Stream<Letta.agents.LettaStreamingResponse>>;
    /**
     * Asynchronously process a user message and return a run object.
     * The actual processing happens in the background, and the status can be checked using the run ID.
     *
     * @param {string} agentId
     * @param {Letta.agents.LettaAsyncRequest} request
     * @param {Messages.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Letta.UnprocessableEntityError}
     *
     * @example
     *     await client.agents.messages.createAsync("agent_id", {
     *         messages: [{
     *                 role: "user",
     *                 content: [{
     *                         type: "text",
     *                         text: "text"
     *                     }]
     *             }]
     *     })
     */
    createAsync(agentId: string, request: Letta.agents.LettaAsyncRequest, requestOptions?: Messages.RequestOptions): Promise<Letta.Run>;
    /**
     * Resets the messages for an agent
     *
     * @param {string} agentId
     * @param {Letta.agents.MessagesResetRequest} request
     * @param {Messages.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Letta.UnprocessableEntityError}
     *
     * @example
     *     await client.agents.messages.reset("agent_id")
     */
    reset(agentId: string, request?: Letta.agents.MessagesResetRequest, requestOptions?: Messages.RequestOptions): Promise<Letta.AgentState>;
    protected _getCustomAuthorizationHeaders(): Promise<{
        Authorization: string;
    }>;
}
