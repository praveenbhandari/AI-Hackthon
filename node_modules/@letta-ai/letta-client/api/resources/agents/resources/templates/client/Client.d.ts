/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as environments from "../../../../../../environments";
import * as core from "../../../../../../core";
import * as Letta from "../../../../../index";
export declare namespace Templates {
    interface Options {
        environment?: core.Supplier<environments.LettaEnvironment | string>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        token?: core.Supplier<string | undefined>;
        fetcher?: core.FetchFunction;
    }
    interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Additional headers to include in the request. */
        headers?: Record<string, string>;
    }
}
export declare class Templates {
    protected readonly _options: Templates.Options;
    constructor(_options?: Templates.Options);
    /**
     * <Note>This endpoint is only available on Letta Cloud.</Note>
     *
     * Creates a new version of the template version of the agent.
     *
     * @param {string} agentId - The agent ID of the agent to migrate, if this agent is not a template, it will create a agent template from the agent provided as well
     * @param {Letta.agents.TemplatesCreateVersionRequest} request
     * @param {Templates.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Letta.NotFoundError}
     * @throws {@link Letta.InternalServerError}
     *
     * @example
     *     await client.agents.templates.createVersion("agent_id")
     */
    createVersion(agentId: string, request?: Letta.agents.TemplatesCreateVersionRequest, requestOptions?: Templates.RequestOptions): Promise<void>;
    /**
     * <Note>This endpoint is only available on Letta Cloud.</Note>
     *
     * Migrate an agent to a new versioned agent template.
     *
     * @param {string} agentId
     * @param {Letta.agents.TemplatesMigrateRequest} request
     * @param {Templates.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Letta.NotFoundError}
     * @throws {@link Letta.ConflictError}
     * @throws {@link Letta.InternalServerError}
     *
     * @example
     *     await client.agents.templates.migrate("agent_id", {
     *         toTemplate: "to_template",
     *         preserveCoreMemories: true
     *     })
     */
    migrate(agentId: string, request: Letta.agents.TemplatesMigrateRequest, requestOptions?: Templates.RequestOptions): Promise<Letta.agents.TemplatesMigrateResponse>;
    /**
     * <Note>This endpoint is only available on Letta Cloud.</Note>
     *
     * Creates a template from an agent.
     *
     * @param {string} agentId
     * @param {Letta.agents.TemplatesCreateRequest} request
     * @param {Templates.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Letta.InternalServerError}
     *
     * @example
     *     await client.agents.templates.create("agent_id")
     */
    create(agentId: string, request?: Letta.agents.TemplatesCreateRequest, requestOptions?: Templates.RequestOptions): Promise<Letta.agents.TemplatesCreateResponse>;
    protected _getCustomAuthorizationHeaders(): Promise<{
        Authorization: string;
    }>;
}
