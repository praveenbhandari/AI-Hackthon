/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as environments from "../../../../environments";
import * as core from "../../../../core";
import * as Letta from "../../../index";
import * as fs from "fs";
import { Blob } from "buffer";
import { Context } from "../resources/context/client/Client";
import { Tools } from "../resources/tools/client/Client";
import { Sources } from "../resources/sources/client/Client";
import { CoreMemory } from "../resources/coreMemory/client/Client";
import { Blocks } from "../resources/blocks/client/Client";
import { Passages } from "../resources/passages/client/Client";
import { Messages } from "../resources/messages/client/Client";
import { Groups } from "../resources/groups/client/Client";
import { Templates } from "../resources/templates/client/Client";
import { MemoryVariables } from "../resources/memoryVariables/client/Client";
export declare namespace Agents {
    interface Options {
        environment?: core.Supplier<environments.LettaEnvironment | string>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        token?: core.Supplier<string | undefined>;
        fetcher?: core.FetchFunction;
    }
    interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Additional headers to include in the request. */
        headers?: Record<string, string>;
    }
}
export declare class Agents {
    protected readonly _options: Agents.Options;
    protected _context: Context | undefined;
    protected _tools: Tools | undefined;
    protected _sources: Sources | undefined;
    protected _coreMemory: CoreMemory | undefined;
    protected _blocks: Blocks | undefined;
    protected _passages: Passages | undefined;
    protected _messages: Messages | undefined;
    protected _groups: Groups | undefined;
    protected _templates: Templates | undefined;
    protected _memoryVariables: MemoryVariables | undefined;
    constructor(_options?: Agents.Options);
    get context(): Context;
    get tools(): Tools;
    get sources(): Sources;
    get coreMemory(): CoreMemory;
    get blocks(): Blocks;
    get passages(): Passages;
    get messages(): Messages;
    get groups(): Groups;
    get templates(): Templates;
    get memoryVariables(): MemoryVariables;
    /**
     * List all agents associated with a given user.
     *
     * This endpoint retrieves a list of all agents and their configurations
     * associated with the specified user ID.
     *
     * @param {Letta.AgentsListRequest} request
     * @param {Agents.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Letta.UnprocessableEntityError}
     *
     * @example
     *     await client.agents.list()
     */
    list(request?: Letta.AgentsListRequest, requestOptions?: Agents.RequestOptions): Promise<Letta.AgentState[]>;
    /**
     * Create a new agent with the specified configuration.
     *
     * @param {Letta.CreateAgentRequest} request
     * @param {Agents.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Letta.UnprocessableEntityError}
     *
     * @example
     *     await client.agents.create()
     */
    create(request?: Letta.CreateAgentRequest, requestOptions?: Agents.RequestOptions): Promise<Letta.AgentState>;
    /**
     * Get the count of all agents associated with a given user.
     *
     * @param {Agents.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Letta.UnprocessableEntityError}
     *
     * @example
     *     await client.agents.count()
     */
    count(requestOptions?: Agents.RequestOptions): Promise<number>;
    /**
     * Export the serialized JSON representation of an agent, formatted with indentation.
     *
     * @param {string} agentId
     * @param {Agents.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Letta.UnprocessableEntityError}
     *
     * @example
     *     await client.agents.exportFile("agent_id")
     */
    exportFile(agentId: string, requestOptions?: Agents.RequestOptions): Promise<string>;
    /**
     * Import a serialized agent file and recreate the agent in the system.
     *
     * @param {File | fs.ReadStream | Blob} file
     * @param {Letta.BodyImportAgentSerialized} request
     * @param {Agents.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Letta.UnprocessableEntityError}
     *
     * @example
     *     await client.agents.importFile(fs.createReadStream("/path/to/your/file"), {})
     */
    importFile(file: File | fs.ReadStream | Blob, request: Letta.BodyImportAgentSerialized, requestOptions?: Agents.RequestOptions): Promise<Letta.AgentState>;
    /**
     * Get the state of the agent.
     *
     * @param {string} agentId
     * @param {Letta.AgentsRetrieveRequest} request
     * @param {Agents.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Letta.UnprocessableEntityError}
     *
     * @example
     *     await client.agents.retrieve("agent_id")
     */
    retrieve(agentId: string, request?: Letta.AgentsRetrieveRequest, requestOptions?: Agents.RequestOptions): Promise<Letta.AgentState>;
    /**
     * Delete an agent.
     *
     * @param {string} agentId
     * @param {Agents.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Letta.UnprocessableEntityError}
     *
     * @example
     *     await client.agents.delete("agent_id")
     */
    delete(agentId: string, requestOptions?: Agents.RequestOptions): Promise<unknown>;
    /**
     * Update an existing agent
     *
     * @param {string} agentId
     * @param {Letta.UpdateAgent} request
     * @param {Agents.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Letta.UnprocessableEntityError}
     *
     * @example
     *     await client.agents.modify("agent_id")
     */
    modify(agentId: string, request?: Letta.UpdateAgent, requestOptions?: Agents.RequestOptions): Promise<Letta.AgentState>;
    /**
     * Summarize an agent's conversation history to a target message length.
     *
     * This endpoint summarizes the current message history for a given agent,
     * truncating and compressing it down to the specified `max_message_length`.
     *
     * @param {string} agentId
     * @param {Letta.SummarizeAgentConversationRequest} request
     * @param {Agents.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Letta.UnprocessableEntityError}
     *
     * @example
     *     await client.agents.summarizeAgentConversation("agent_id", {
     *         maxMessageLength: 1
     *     })
     */
    summarizeAgentConversation(agentId: string, request: Letta.SummarizeAgentConversationRequest, requestOptions?: Agents.RequestOptions): Promise<Letta.AgentState>;
    /**
     * <Note>This endpoint is only available on Letta Cloud.</Note>
     *
     * Search deployed agents.
     *
     * @param {Letta.AgentsSearchRequest} request
     * @param {Agents.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.agents.search()
     */
    search(request?: Letta.AgentsSearchRequest, requestOptions?: Agents.RequestOptions): Promise<Letta.AgentsSearchResponse>;
    protected _getCustomAuthorizationHeaders(): Promise<{
        Authorization: string;
    }>;
}
