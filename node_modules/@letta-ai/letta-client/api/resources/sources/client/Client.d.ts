/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as environments from "../../../../environments";
import * as core from "../../../../core";
import * as Letta from "../../../index";
import { Files } from "../resources/files/client/Client";
import { Passages } from "../resources/passages/client/Client";
export declare namespace Sources {
    interface Options {
        environment?: core.Supplier<environments.LettaEnvironment | string>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        token?: core.Supplier<string | undefined>;
        fetcher?: core.FetchFunction;
    }
    interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Additional headers to include in the request. */
        headers?: Record<string, string>;
    }
}
export declare class Sources {
    protected readonly _options: Sources.Options;
    protected _files: Files | undefined;
    protected _passages: Passages | undefined;
    constructor(_options?: Sources.Options);
    get files(): Files;
    get passages(): Passages;
    /**
     * Count all data sources created by a user.
     *
     * @param {Sources.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Letta.UnprocessableEntityError}
     *
     * @example
     *     await client.sources.count()
     */
    count(requestOptions?: Sources.RequestOptions): Promise<number>;
    /**
     * Get all sources
     *
     * @param {string} sourceId
     * @param {Sources.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Letta.UnprocessableEntityError}
     *
     * @example
     *     await client.sources.retrieve("source_id")
     */
    retrieve(sourceId: string, requestOptions?: Sources.RequestOptions): Promise<Letta.Source>;
    /**
     * Delete a data source.
     *
     * @param {string} sourceId
     * @param {Sources.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Letta.UnprocessableEntityError}
     *
     * @example
     *     await client.sources.delete("source_id")
     */
    delete(sourceId: string, requestOptions?: Sources.RequestOptions): Promise<unknown>;
    /**
     * Update the name or documentation of an existing data source.
     *
     * @param {string} sourceId
     * @param {Letta.SourceUpdate} request
     * @param {Sources.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Letta.UnprocessableEntityError}
     *
     * @example
     *     await client.sources.modify("source_id")
     */
    modify(sourceId: string, request?: Letta.SourceUpdate, requestOptions?: Sources.RequestOptions): Promise<Letta.Source>;
    /**
     * Get a source by name
     *
     * @param {string} sourceName
     * @param {Sources.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Letta.UnprocessableEntityError}
     *
     * @example
     *     await client.sources.retrieveByName("source_name")
     */
    retrieveByName(sourceName: string, requestOptions?: Sources.RequestOptions): Promise<string>;
    /**
     * List all data sources created by a user.
     *
     * @param {Sources.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Letta.UnprocessableEntityError}
     *
     * @example
     *     await client.sources.list()
     */
    list(requestOptions?: Sources.RequestOptions): Promise<Letta.Source[]>;
    /**
     * Create a new data source.
     *
     * @param {Letta.SourceCreate} request
     * @param {Sources.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Letta.UnprocessableEntityError}
     *
     * @example
     *     await client.sources.create({
     *         name: "name"
     *     })
     */
    create(request: Letta.SourceCreate, requestOptions?: Sources.RequestOptions): Promise<Letta.Source>;
    protected _getCustomAuthorizationHeaders(): Promise<{
        Authorization: string;
    }>;
}
