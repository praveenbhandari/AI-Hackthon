/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as environments from "../../../../environments";
import * as core from "../../../../core";
import * as Letta from "../../../index";
export declare namespace Messages {
    interface Options {
        environment?: core.Supplier<environments.LettaEnvironment | string>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        token?: core.Supplier<string | undefined>;
        fetcher?: core.FetchFunction;
    }
    interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Additional headers to include in the request. */
        headers?: Record<string, string>;
    }
}
export declare class Messages {
    protected readonly _options: Messages.Options;
    constructor(_options?: Messages.Options);
    /**
     * Get messages for a specific batch job.
     *
     * Returns messages associated with the batch in chronological order.
     *
     * Pagination:
     * - For the first page, omit the cursor parameter
     * - For subsequent pages, use the ID of the last message from the previous response as the cursor
     * - Results will include messages before/after the cursor based on sort_descending
     *
     * @param {string} batchId
     * @param {Letta.ListBatchMessagesRequest} request
     * @param {Messages.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Letta.UnprocessableEntityError}
     *
     * @example
     *     await client.messages.listBatchMessages("batch_id")
     */
    listBatchMessages(batchId: string, request?: Letta.ListBatchMessagesRequest, requestOptions?: Messages.RequestOptions): Promise<Letta.LettaBatchMessages>;
    protected _getCustomAuthorizationHeaders(): Promise<{
        Authorization: string;
    }>;
}
