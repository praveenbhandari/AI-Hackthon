/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as environments from "../../../../environments";
import * as core from "../../../../core";
import * as Letta from "../../../index";
export declare namespace Steps {
    interface Options {
        environment?: core.Supplier<environments.LettaEnvironment | string>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        token?: core.Supplier<string | undefined>;
        fetcher?: core.FetchFunction;
    }
    interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Additional headers to include in the request. */
        headers?: Record<string, string>;
    }
}
export declare class Steps {
    protected readonly _options: Steps.Options;
    constructor(_options?: Steps.Options);
    /**
     * List steps with optional pagination and date filters.
     * Dates should be provided in ISO 8601 format (e.g. 2025-01-29T15:01:19-08:00)
     *
     * @param {Letta.StepsListRequest} request
     * @param {Steps.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Letta.UnprocessableEntityError}
     *
     * @example
     *     await client.steps.list()
     */
    list(request?: Letta.StepsListRequest, requestOptions?: Steps.RequestOptions): Promise<Letta.Step[]>;
    /**
     * Get a step by ID.
     *
     * @param {string} stepId
     * @param {Steps.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Letta.UnprocessableEntityError}
     *
     * @example
     *     await client.steps.retrieve("step_id")
     */
    retrieve(stepId: string, requestOptions?: Steps.RequestOptions): Promise<Letta.Step>;
    protected _getCustomAuthorizationHeaders(): Promise<{
        Authorization: string;
    }>;
}
