/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as environments from "../../../../environments";
import * as core from "../../../../core";
import * as Letta from "../../../index";
import { Properties } from "../resources/properties/client/Client";
export declare namespace Identities {
    interface Options {
        environment?: core.Supplier<environments.LettaEnvironment | string>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        token?: core.Supplier<string | undefined>;
        fetcher?: core.FetchFunction;
    }
    interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Additional headers to include in the request. */
        headers?: Record<string, string>;
    }
}
export declare class Identities {
    protected readonly _options: Identities.Options;
    protected _properties: Properties | undefined;
    constructor(_options?: Identities.Options);
    get properties(): Properties;
    /**
     * Get a list of all identities in the database
     *
     * @param {Letta.IdentitiesListRequest} request
     * @param {Identities.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Letta.UnprocessableEntityError}
     *
     * @example
     *     await client.identities.list()
     */
    list(request?: Letta.IdentitiesListRequest, requestOptions?: Identities.RequestOptions): Promise<Letta.Identity[]>;
    /**
     * @param {Letta.IdentityCreate} request
     * @param {Identities.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Letta.UnprocessableEntityError}
     *
     * @example
     *     await client.identities.create({
     *         identifierKey: "identifier_key",
     *         name: "name",
     *         identityType: "org"
     *     })
     */
    create(request: Letta.IdentityCreate, requestOptions?: Identities.RequestOptions): Promise<Letta.Identity>;
    /**
     * @param {Letta.IdentityUpsert} request
     * @param {Identities.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Letta.UnprocessableEntityError}
     *
     * @example
     *     await client.identities.upsert({
     *         identifierKey: "identifier_key",
     *         name: "name",
     *         identityType: "org"
     *     })
     */
    upsert(request: Letta.IdentityUpsert, requestOptions?: Identities.RequestOptions): Promise<Letta.Identity>;
    /**
     * Get count of all identities for a user
     *
     * @param {Identities.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Letta.UnprocessableEntityError}
     *
     * @example
     *     await client.identities.count()
     */
    count(requestOptions?: Identities.RequestOptions): Promise<number>;
    /**
     * @param {string} identityId
     * @param {Identities.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Letta.UnprocessableEntityError}
     *
     * @example
     *     await client.identities.retrieve("identity_id")
     */
    retrieve(identityId: string, requestOptions?: Identities.RequestOptions): Promise<Letta.Identity>;
    /**
     * Delete an identity by its identifier key
     *
     * @param {string} identityId
     * @param {Identities.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Letta.UnprocessableEntityError}
     *
     * @example
     *     await client.identities.delete("identity_id")
     */
    delete(identityId: string, requestOptions?: Identities.RequestOptions): Promise<unknown>;
    /**
     * @param {string} identityId
     * @param {Letta.IdentityUpdate} request
     * @param {Identities.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Letta.UnprocessableEntityError}
     *
     * @example
     *     await client.identities.modify("identity_id")
     */
    modify(identityId: string, request?: Letta.IdentityUpdate, requestOptions?: Identities.RequestOptions): Promise<Letta.Identity>;
    protected _getCustomAuthorizationHeaders(): Promise<{
        Authorization: string;
    }>;
}
