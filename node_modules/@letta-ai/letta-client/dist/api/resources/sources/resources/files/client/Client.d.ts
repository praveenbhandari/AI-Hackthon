/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as environments from "../../../../../../environments";
import * as core from "../../../../../../core";
import * as Letta from "../../../../../index";
import * as fs from "fs";
import { Blob } from "buffer";
export declare namespace Files {
    interface Options {
        environment?: core.Supplier<environments.LettaEnvironment | string>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        token?: core.Supplier<string | undefined>;
        fetcher?: core.FetchFunction;
    }
    interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Additional headers to include in the request. */
        headers?: Record<string, string>;
    }
}
export declare class Files {
    protected readonly _options: Files.Options;
    constructor(_options?: Files.Options);
    /**
     * Upload a file to a data source.
     *
     * @param {File | fs.ReadStream | Blob} file
     * @param {string} sourceId
     * @param {Files.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Letta.UnprocessableEntityError}
     *
     * @example
     *     await client.sources.files.upload(fs.createReadStream("/path/to/your/file"), "source_id")
     */
    upload(file: File | fs.ReadStream | Blob, sourceId: string, requestOptions?: Files.RequestOptions): Promise<Letta.Job>;
    /**
     * List paginated files associated with a data source.
     *
     * @param {string} sourceId
     * @param {Letta.sources.FilesListRequest} request
     * @param {Files.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Letta.UnprocessableEntityError}
     *
     * @example
     *     await client.sources.files.list("source_id")
     */
    list(sourceId: string, request?: Letta.sources.FilesListRequest, requestOptions?: Files.RequestOptions): Promise<Letta.FileMetadata[]>;
    /**
     * Delete a data source.
     *
     * @param {string} sourceId
     * @param {string} fileId
     * @param {Files.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Letta.UnprocessableEntityError}
     *
     * @example
     *     await client.sources.files.delete("source_id", "file_id")
     */
    delete(sourceId: string, fileId: string, requestOptions?: Files.RequestOptions): Promise<void>;
    protected _getCustomAuthorizationHeaders(): Promise<{
        Authorization: string;
    }>;
}
