/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as environments from "../../../../../../environments";
import * as core from "../../../../../../core";
import * as Letta from "../../../../../index";
export declare namespace Sources {
    interface Options {
        environment?: core.Supplier<environments.LettaEnvironment | string>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        token?: core.Supplier<string | undefined>;
        fetcher?: core.FetchFunction;
    }
    interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Additional headers to include in the request. */
        headers?: Record<string, string>;
    }
}
export declare class Sources {
    protected readonly _options: Sources.Options;
    constructor(_options?: Sources.Options);
    /**
     * Attach a source to an agent.
     *
     * @param {string} agentId
     * @param {string} sourceId
     * @param {Sources.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Letta.UnprocessableEntityError}
     *
     * @example
     *     await client.agents.sources.attach("agent_id", "source_id")
     */
    attach(agentId: string, sourceId: string, requestOptions?: Sources.RequestOptions): Promise<Letta.AgentState>;
    /**
     * Detach a source from an agent.
     *
     * @param {string} agentId
     * @param {string} sourceId
     * @param {Sources.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Letta.UnprocessableEntityError}
     *
     * @example
     *     await client.agents.sources.detach("agent_id", "source_id")
     */
    detach(agentId: string, sourceId: string, requestOptions?: Sources.RequestOptions): Promise<Letta.AgentState>;
    /**
     * Get the sources associated with an agent.
     *
     * @param {string} agentId
     * @param {Sources.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Letta.UnprocessableEntityError}
     *
     * @example
     *     await client.agents.sources.list("agent_id")
     */
    list(agentId: string, requestOptions?: Sources.RequestOptions): Promise<Letta.Source[]>;
    protected _getCustomAuthorizationHeaders(): Promise<{
        Authorization: string;
    }>;
}
