/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as environments from "../../../../../../environments";
import * as core from "../../../../../../core";
import * as Letta from "../../../../../index";
export declare namespace Blocks {
    interface Options {
        environment?: core.Supplier<environments.LettaEnvironment | string>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        token?: core.Supplier<string | undefined>;
        fetcher?: core.FetchFunction;
    }
    interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Additional headers to include in the request. */
        headers?: Record<string, string>;
    }
}
export declare class Blocks {
    protected readonly _options: Blocks.Options;
    constructor(_options?: Blocks.Options);
    /**
     * Retrieve a core memory block from an agent.
     *
     * @param {string} agentId
     * @param {string} blockLabel
     * @param {Blocks.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Letta.UnprocessableEntityError}
     *
     * @example
     *     await client.agents.blocks.retrieve("agent_id", "block_label")
     */
    retrieve(agentId: string, blockLabel: string, requestOptions?: Blocks.RequestOptions): Promise<Letta.Block>;
    /**
     * Updates a core memory block of an agent.
     *
     * @param {string} agentId
     * @param {string} blockLabel
     * @param {Letta.BlockUpdate} request
     * @param {Blocks.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Letta.UnprocessableEntityError}
     *
     * @example
     *     await client.agents.blocks.modify("agent_id", "block_label", {})
     */
    modify(agentId: string, blockLabel: string, request: Letta.BlockUpdate, requestOptions?: Blocks.RequestOptions): Promise<Letta.Block>;
    /**
     * Retrieve the core memory blocks of a specific agent.
     *
     * @param {string} agentId
     * @param {Blocks.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Letta.UnprocessableEntityError}
     *
     * @example
     *     await client.agents.blocks.list("agent_id")
     */
    list(agentId: string, requestOptions?: Blocks.RequestOptions): Promise<Letta.Block[]>;
    /**
     * Attach a core memoryblock to an agent.
     *
     * @param {string} agentId
     * @param {string} blockId
     * @param {Blocks.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Letta.UnprocessableEntityError}
     *
     * @example
     *     await client.agents.blocks.attach("agent_id", "block_id")
     */
    attach(agentId: string, blockId: string, requestOptions?: Blocks.RequestOptions): Promise<Letta.AgentState>;
    /**
     * Detach a core memory block from an agent.
     *
     * @param {string} agentId
     * @param {string} blockId
     * @param {Blocks.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Letta.UnprocessableEntityError}
     *
     * @example
     *     await client.agents.blocks.detach("agent_id", "block_id")
     */
    detach(agentId: string, blockId: string, requestOptions?: Blocks.RequestOptions): Promise<Letta.AgentState>;
    protected _getCustomAuthorizationHeaders(): Promise<{
        Authorization: string;
    }>;
}
