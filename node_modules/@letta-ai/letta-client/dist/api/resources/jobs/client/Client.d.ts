/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as environments from "../../../../environments";
import * as core from "../../../../core";
import * as Letta from "../../../index";
export declare namespace Jobs {
    interface Options {
        environment?: core.Supplier<environments.LettaEnvironment | string>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        token?: core.Supplier<string | undefined>;
        fetcher?: core.FetchFunction;
    }
    interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Additional headers to include in the request. */
        headers?: Record<string, string>;
    }
}
export declare class Jobs {
    protected readonly _options: Jobs.Options;
    constructor(_options?: Jobs.Options);
    /**
     * List all jobs.
     *
     * @param {Letta.JobsListRequest} request
     * @param {Jobs.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Letta.UnprocessableEntityError}
     *
     * @example
     *     await client.jobs.list()
     */
    list(request?: Letta.JobsListRequest, requestOptions?: Jobs.RequestOptions): Promise<Letta.Job[]>;
    /**
     * List all active jobs.
     *
     * @param {Letta.JobsListActiveRequest} request
     * @param {Jobs.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Letta.UnprocessableEntityError}
     *
     * @example
     *     await client.jobs.listActive()
     */
    listActive(request?: Letta.JobsListActiveRequest, requestOptions?: Jobs.RequestOptions): Promise<Letta.Job[]>;
    /**
     * Get the status of a job.
     *
     * @param {string} jobId
     * @param {Jobs.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Letta.UnprocessableEntityError}
     *
     * @example
     *     await client.jobs.retrieve("job_id")
     */
    retrieve(jobId: string, requestOptions?: Jobs.RequestOptions): Promise<Letta.Job>;
    /**
     * Delete a job by its job_id.
     *
     * @param {string} jobId
     * @param {Jobs.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Letta.UnprocessableEntityError}
     *
     * @example
     *     await client.jobs.delete("job_id")
     */
    delete(jobId: string, requestOptions?: Jobs.RequestOptions): Promise<Letta.Job>;
    protected _getCustomAuthorizationHeaders(): Promise<{
        Authorization: string;
    }>;
}
