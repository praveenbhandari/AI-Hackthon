/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as environments from "../../../../environments";
import * as core from "../../../../core";
import * as Letta from "../../../index";
export declare namespace Providers {
    interface Options {
        environment?: core.Supplier<environments.LettaEnvironment | string>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        token?: core.Supplier<string | undefined>;
        fetcher?: core.FetchFunction;
    }
    interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Additional headers to include in the request. */
        headers?: Record<string, string>;
    }
}
export declare class Providers {
    protected readonly _options: Providers.Options;
    constructor(_options?: Providers.Options);
    /**
     * Get a list of all custom providers in the database
     *
     * @param {Letta.ProvidersListRequest} request
     * @param {Providers.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Letta.UnprocessableEntityError}
     *
     * @example
     *     await client.providers.list()
     */
    list(request?: Letta.ProvidersListRequest, requestOptions?: Providers.RequestOptions): Promise<Letta.Provider[]>;
    /**
     * Create a new custom provider
     *
     * @param {Letta.ProviderCreate} request
     * @param {Providers.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Letta.UnprocessableEntityError}
     *
     * @example
     *     await client.providers.create({
     *         name: "name",
     *         providerType: "anthropic",
     *         apiKey: "api_key"
     *     })
     */
    create(request: Letta.ProviderCreate, requestOptions?: Providers.RequestOptions): Promise<Letta.Provider>;
    /**
     * Delete an existing custom provider
     *
     * @param {string} providerId
     * @param {Providers.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Letta.UnprocessableEntityError}
     *
     * @example
     *     await client.providers.delete("provider_id")
     */
    delete(providerId: string, requestOptions?: Providers.RequestOptions): Promise<unknown>;
    /**
     * Update an existing custom provider
     *
     * @param {string} providerId
     * @param {Letta.ProviderUpdate} request
     * @param {Providers.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Letta.UnprocessableEntityError}
     *
     * @example
     *     await client.providers.modify("provider_id", {
     *         apiKey: "api_key"
     *     })
     */
    modify(providerId: string, request: Letta.ProviderUpdate, requestOptions?: Providers.RequestOptions): Promise<Letta.Provider>;
    /**
     * @param {Providers.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Letta.UnprocessableEntityError}
     *
     * @example
     *     await client.providers.check()
     */
    check(requestOptions?: Providers.RequestOptions): Promise<unknown>;
    protected _getCustomAuthorizationHeaders(): Promise<{
        Authorization: string;
    }>;
}
