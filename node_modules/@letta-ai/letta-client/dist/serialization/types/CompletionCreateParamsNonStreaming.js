"use strict";
/**
 * This file was auto-generated by Fern from our API Definition.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.CompletionCreateParamsNonStreaming = void 0;
const core = __importStar(require("../../core"));
const CompletionCreateParamsNonStreamingMessagesItem_1 = require("./CompletionCreateParamsNonStreamingMessagesItem");
const CompletionCreateParamsNonStreamingModel_1 = require("./CompletionCreateParamsNonStreamingModel");
const ChatCompletionAudioParam_1 = require("./ChatCompletionAudioParam");
const CompletionCreateParamsNonStreamingFunctionCall_1 = require("./CompletionCreateParamsNonStreamingFunctionCall");
const OpenaiTypesChatCompletionCreateParamsFunction_1 = require("./OpenaiTypesChatCompletionCreateParamsFunction");
const CompletionCreateParamsNonStreamingModalitiesItem_1 = require("./CompletionCreateParamsNonStreamingModalitiesItem");
const ChatCompletionPredictionContentParam_1 = require("./ChatCompletionPredictionContentParam");
const CompletionCreateParamsNonStreamingReasoningEffort_1 = require("./CompletionCreateParamsNonStreamingReasoningEffort");
const CompletionCreateParamsNonStreamingResponseFormat_1 = require("./CompletionCreateParamsNonStreamingResponseFormat");
const CompletionCreateParamsNonStreamingServiceTier_1 = require("./CompletionCreateParamsNonStreamingServiceTier");
const CompletionCreateParamsNonStreamingStop_1 = require("./CompletionCreateParamsNonStreamingStop");
const ChatCompletionStreamOptionsParam_1 = require("./ChatCompletionStreamOptionsParam");
const CompletionCreateParamsNonStreamingToolChoice_1 = require("./CompletionCreateParamsNonStreamingToolChoice");
const ChatCompletionToolParam_1 = require("./ChatCompletionToolParam");
const WebSearchOptions_1 = require("./WebSearchOptions");
exports.CompletionCreateParamsNonStreaming = core.serialization.object({
    messages: core.serialization.list(CompletionCreateParamsNonStreamingMessagesItem_1.CompletionCreateParamsNonStreamingMessagesItem),
    model: CompletionCreateParamsNonStreamingModel_1.CompletionCreateParamsNonStreamingModel,
    audio: ChatCompletionAudioParam_1.ChatCompletionAudioParam.optional(),
    frequencyPenalty: core.serialization.property("frequency_penalty", core.serialization.number().optional()),
    functionCall: core.serialization.property("function_call", CompletionCreateParamsNonStreamingFunctionCall_1.CompletionCreateParamsNonStreamingFunctionCall.optional()),
    functions: core.serialization.list(OpenaiTypesChatCompletionCreateParamsFunction_1.OpenaiTypesChatCompletionCreateParamsFunction).optional(),
    logitBias: core.serialization.property("logit_bias", core.serialization.record(core.serialization.string(), core.serialization.number().optional()).optional()),
    logprobs: core.serialization.boolean().optional(),
    maxCompletionTokens: core.serialization.property("max_completion_tokens", core.serialization.number().optional()),
    maxTokens: core.serialization.property("max_tokens", core.serialization.number().optional()),
    metadata: core.serialization.record(core.serialization.string(), core.serialization.string().optional()).optional(),
    modalities: core.serialization.list(CompletionCreateParamsNonStreamingModalitiesItem_1.CompletionCreateParamsNonStreamingModalitiesItem).optional(),
    n: core.serialization.number().optional(),
    parallelToolCalls: core.serialization.property("parallel_tool_calls", core.serialization.boolean().optional()),
    prediction: ChatCompletionPredictionContentParam_1.ChatCompletionPredictionContentParam.optional(),
    presencePenalty: core.serialization.property("presence_penalty", core.serialization.number().optional()),
    reasoningEffort: core.serialization.property("reasoning_effort", CompletionCreateParamsNonStreamingReasoningEffort_1.CompletionCreateParamsNonStreamingReasoningEffort.optional()),
    responseFormat: core.serialization.property("response_format", CompletionCreateParamsNonStreamingResponseFormat_1.CompletionCreateParamsNonStreamingResponseFormat.optional()),
    seed: core.serialization.number().optional(),
    serviceTier: core.serialization.property("service_tier", CompletionCreateParamsNonStreamingServiceTier_1.CompletionCreateParamsNonStreamingServiceTier.optional()),
    stop: CompletionCreateParamsNonStreamingStop_1.CompletionCreateParamsNonStreamingStop.optional(),
    store: core.serialization.boolean().optional(),
    streamOptions: core.serialization.property("stream_options", ChatCompletionStreamOptionsParam_1.ChatCompletionStreamOptionsParam.optional()),
    temperature: core.serialization.number().optional(),
    toolChoice: core.serialization.property("tool_choice", CompletionCreateParamsNonStreamingToolChoice_1.CompletionCreateParamsNonStreamingToolChoice.optional()),
    tools: core.serialization.list(ChatCompletionToolParam_1.ChatCompletionToolParam).optional(),
    topLogprobs: core.serialization.property("top_logprobs", core.serialization.number().optional()),
    topP: core.serialization.property("top_p", core.serialization.number().optional()),
    user: core.serialization.string().optional(),
    webSearchOptions: core.serialization.property("web_search_options", WebSearchOptions_1.WebSearchOptions.optional()),
    stream: core.serialization.boolean().optional(),
});
