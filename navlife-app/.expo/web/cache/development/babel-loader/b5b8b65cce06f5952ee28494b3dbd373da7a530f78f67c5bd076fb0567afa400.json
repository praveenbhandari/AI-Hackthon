{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nvar API_BASE_URL = 'http://localhost:9876';\nexport var getWeatherRecommendation = function () {\n  var _ref = _asyncToGenerator(function* (location) {\n    try {\n      console.log(\"Getting weather recommendation for \" + location + \"...\");\n      try {\n        var response = yield fetch(API_BASE_URL + \"/api/weather/recommendation?location=\" + encodeURIComponent(location));\n        var data = yield response.json();\n        return data;\n      } catch (fetchError) {\n        console.error('Error fetching from API:', fetchError);\n        console.log('Falling back to mock data...');\n        return new Promise(function (resolve) {\n          setTimeout(function () {\n            resolve({\n              success: true,\n              weather: {\n                city: location,\n                country: \"US\",\n                temperature: 14.45,\n                feels_like: 13.86,\n                description: \"clear sky\",\n                humidity: 73,\n                wind_speed: 0.89,\n                icon: \"01n\",\n                forecast: [{\n                  date: \"2025-06-22\",\n                  temperature: {\n                    min: 12.31,\n                    max: 24.11\n                  },\n                  description: \"clear sky\",\n                  icon: \"01n\",\n                  precipitation_probability: 0\n                }, {\n                  date: \"2025-06-23\",\n                  temperature: {\n                    min: 12.37,\n                    max: 22.41\n                  },\n                  description: \"clear sky\",\n                  icon: \"01d\",\n                  precipitation_probability: 0\n                }, {\n                  date: \"2025-06-24\",\n                  temperature: {\n                    min: 12.46,\n                    max: 16.86\n                  },\n                  description: \"clear sky\",\n                  icon: \"01d\",\n                  precipitation_probability: 0\n                }],\n                currentTime: new Date().toISOString(),\n                hour: new Date().getHours(),\n                timeOfDay: new Date().getHours() >= 6 && new Date().getHours() < 18 ? \"day\" : \"night\"\n              },\n              recommendation: {\n                top: \"Long-sleeved t-shirt or light sweater\",\n                bottom: \"Jeans or chinos\",\n                outerwear: \"Light jacket or hoodie\",\n                accessories: [\"Light scarf (optional)\", \"Watch\"],\n                footwear: \"Sneakers or comfortable walking shoes\",\n                additional_tips: [\"Dress in layers as temperatures will increase throughout the day.\", \"Consider a hat for sun protection during the day.\"]\n              },\n              reasoning: \"It's currently \" + (new Date().getHours() >= 6 && new Date().getHours() < 18 ? \"day\" : \"night\") + \" in \" + location + \" with a temperature of 14.45\\xB0C, which feels like 13.86\\xB0C. A long-sleeved t-shirt or light sweater will provide enough warmth for the cool air. Jeans or chinos are suitable for the bottom. A light jacket or hoodie is recommended as an outer layer for extra warmth during the night and cooler morning hours.\",\n              source: \"gemini\"\n            });\n          }, 1500);\n        });\n      }\n    } catch (error) {\n      console.error('Error getting weather recommendation:', error);\n      return {\n        success: false,\n        message: error.message || 'Failed to get weather recommendation'\n      };\n    }\n  });\n  return function getWeatherRecommendation(_x) {\n    return _ref.apply(this, arguments);\n  };\n}();","map":{"version":3,"names":["API_BASE_URL","getWeatherRecommendation","_ref","_asyncToGenerator","location","console","log","response","fetch","encodeURIComponent","data","json","fetchError","error","Promise","resolve","setTimeout","success","weather","city","country","temperature","feels_like","description","humidity","wind_speed","icon","forecast","date","min","max","precipitation_probability","currentTime","Date","toISOString","hour","getHours","timeOfDay","recommendation","top","bottom","outerwear","accessories","footwear","additional_tips","reasoning","source","message","_x","apply","arguments"],"sources":["/Users/osheen/Desktop/MSBA/Personal projects/AI-Hackathon/AI-Hackthon/navlife-app/api/weatherApi.js"],"sourcesContent":["/**\n * Weather API integration layer\n * Connects to the agentic-weather.js backend\n */\n\n// Base URL for API calls - change this to your actual backend URL when deployed\nconst API_BASE_URL = 'http://localhost:9876';\n\n/**\n * Get weather recommendation for a location\n * @param {string} location - City name\n * @returns {Promise<Object>} - Weather and clothing recommendation data\n */\nexport const getWeatherRecommendation = async (location) => {\n  try {\n    console.log(`Getting weather recommendation for ${location}...`);\n    \n    // Call the backend API through our server.js gateway\n    try {\n      const response = await fetch(`${API_BASE_URL}/api/weather/recommendation?location=${encodeURIComponent(location)}`);\n      const data = await response.json();\n      return data;\n    } catch (fetchError) {\n      console.error('Error fetching from API:', fetchError);\n      console.log('Falling back to mock data...');\n      \n      // Fallback to mock data if API is not available\n      return new Promise((resolve) => {\n        setTimeout(() => {\n          // Mock response based on your agentic-weather.js output format\n          resolve({\n            success: true,\n            weather: {\n              city: location,\n              country: \"US\",\n              temperature: 14.45,\n              feels_like: 13.86,\n              description: \"clear sky\",\n              humidity: 73,\n              wind_speed: 0.89,\n              icon: \"01n\",\n              forecast: [\n                {\n                  date: \"2025-06-22\",\n                  temperature: {\n                    min: 12.31,\n                    max: 24.11\n                  },\n                  description: \"clear sky\",\n                  icon: \"01n\",\n                  precipitation_probability: 0\n                },\n                {\n                  date: \"2025-06-23\",\n                  temperature: {\n                    min: 12.37,\n                    max: 22.41\n                  },\n                  description: \"clear sky\",\n                  icon: \"01d\",\n                  precipitation_probability: 0\n                },\n                {\n                  date: \"2025-06-24\",\n                  temperature: {\n                    min: 12.46,\n                    max: 16.86\n                  },\n                  description: \"clear sky\",\n                  icon: \"01d\",\n                  precipitation_probability: 0\n                }\n              ],\n              currentTime: new Date().toISOString(),\n              hour: new Date().getHours(),\n              timeOfDay: new Date().getHours() >= 6 && new Date().getHours() < 18 ? \"day\" : \"night\"\n            },\n            recommendation: {\n              top: \"Long-sleeved t-shirt or light sweater\",\n              bottom: \"Jeans or chinos\",\n              outerwear: \"Light jacket or hoodie\",\n              accessories: [\n                \"Light scarf (optional)\",\n                \"Watch\"\n              ],\n              footwear: \"Sneakers or comfortable walking shoes\",\n              additional_tips: [\n                \"Dress in layers as temperatures will increase throughout the day.\",\n                \"Consider a hat for sun protection during the day.\"\n              ]\n            },\n            reasoning: `It's currently ${new Date().getHours() >= 6 && new Date().getHours() < 18 ? \"day\" : \"night\"} in ${location} with a temperature of 14.45°C, which feels like 13.86°C. A long-sleeved t-shirt or light sweater will provide enough warmth for the cool air. Jeans or chinos are suitable for the bottom. A light jacket or hoodie is recommended as an outer layer for extra warmth during the night and cooler morning hours.`,\n            source: \"gemini\"\n          });\n        }, 1500);\n      });\n    }\n  } catch (error) {\n    console.error('Error getting weather recommendation:', error);\n    return {\n      success: false,\n      message: error.message || 'Failed to get weather recommendation'\n    };\n  }\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}